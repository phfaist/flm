# output directory -- will create a llm/ subfolder
target_dir: $PREPROCESS_LIB_OUTPUT_DIR

source_dir: $LLM_SRC_DIR

# which modules to preprocess
module_list:
  - 'llm'
  - 'llm.llmstd'
  - 'llm.feature'
  - 'llm.fragmentrenderer'
  - 'llm.fragmentrenderer.html'
  - 'llm.fragmentrenderer.text'
  - 'llm.llmdump'


skip_relative_import_prefixes:
  - 'pylatexenc'

# features
enabled_features:
  keep_future_statements: False
  keep_relative_imports: False
  keep_super_arguments: False
  keep_dict_with_generator: False
  keep_frozenset: False
  keep_logger_debug: False # True
  guards:
    PYTHON2_SUPPORT_CODE: False
    PYLATEXENC1_LEGACY_SUPPORT_CODE: False
    PYLATEXENC2_LEGACY_SUPPORT_CODE: False
    PYLATEXENC_GET_DEFAULT_SPECS_FN: False
    LATEXWALKER_HELPERS: False
    DEBUG_SET_EQ_ATTRIBUTE: False
  patches:
    UNIQUE_OBJECT_ID: |
      import unique_object_id
      fn_unique_object_id = unique_object_id.fn_unique_object_id
    MULTIPLE_BASE_CONSTRUCTORS: |
      def _dobaseconstructors2argslast(Me, self, args, kwargs,
                                       kwargs_to_first_constructor=None):
          kwargs1 = {}
          kwargs2 = dict(kwargs)
          if kwargs_to_first_constructor:
              for kwarg in kwargs_to_first_constructor:
                  if kwarg in kwargs2:
                      kwargs1[kwarg] = kwargs2.pop(kwarg)
          Me.__bases__[0].__init__(self, **kwargs1)
          Me.__bases__[1].__init__(self, *args, **kwargs2)
        
